'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _moment = require('moment');

var _moment2 = _interopRequireDefault(_moment);

var _Pagination = require('./components/Pagination');

var _Pagination2 = _interopRequireDefault(_Pagination);

var _Sortable = require('./components/Sortable');

var _Sortable2 = _interopRequireDefault(_Sortable);

var _vTooltip = require('v-tooltip');

var _UserDetailTooltip = require('./components/UserDetailTooltip');

var _UserDetailTooltip2 = _interopRequireDefault(_UserDetailTooltip);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

Vue.directive('tooltip', _vTooltip.VTooltip);
Vue.directive('close-popover', _vTooltip.VClosePopover);
Vue.component('v-popover', _vTooltip.VPopover);

exports.default = {
    data: function data() {
        return {
            pagination: {
                state: {
                    per_page: this.$cookie.get('per_page') || 10, // required
                    current_page: 1, // required
                    last_page: 1, // required
                    from: 1,
                    to: 10 // required
                },
                options: {
                    alwaysShowPrevNext: true
                }
            },
            orderBy: {
                column: 'id',
                direction: 'asc'
            },
            filters: {},
            search: '',
            collection: null
        };
    },
    props: {
        'url': {
            type: String,
            required: true
        },
        'data': {
            type: Object,
            default: function _default() {
                return null;
            }
        }
    },
    components: {
        'pagination': _Pagination2.default,
        'sortable': _Sortable2.default,
        'user-detail-tooltip': _UserDetailTooltip2.default
    },

    created: function created() {
        if (this.data != null) {
            this.populateCurrentStateAndData(this.data);
        } else {
            this.loadData();
        }
    },

    filters: {
        date: function date(date) {
            var format = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'YYYY-MM-DD';

            var date = (0, _moment2.default)(date);
            return date.isValid() ? date.format(format) : "";
        },
        datetime: function datetime(_datetime) {
            var format = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'YYYY-MM-DD HH:mm:ss';

            var date = (0, _moment2.default)(_datetime);
            return date.isValid() ? date.format(format) : "";
        },
        time: function time(_time) {
            var format = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'HH:mm:ss';

            // '2000-01-01' is here just because momentjs needs a date
            var date = (0, _moment2.default)('2000-01-01 ' + _time);
            return date.isValid() ? date.format(format) : "";
        }
    },

    methods: {
        loadData: function loadData(resetCurrentPage) {
            var _this = this;

            var options = {
                params: {
                    per_page: this.pagination.state.per_page,
                    page: this.pagination.state.current_page,
                    orderBy: this.orderBy.column,
                    orderDirection: this.orderBy.direction
                }
            };

            if (resetCurrentPage === true) {
                options.params.page = 1;
            }

            Object.assign(options.params, this.filters);

            axios.get(this.url, options).then(function (response) {
                return _this.populateCurrentStateAndData(response.data.data);
            }, function (error) {
                // TODO handle error
            });
        },
        filter: function filter(column, value) {
            if (value == '') {
                delete this.filters[column];
            } else {
                this.filters[column] = value;
            }
            // when we change filter, we must reset pagination, because the total items count may has changed
            this.loadData(true);
        },
        populateCurrentStateAndData: function populateCurrentStateAndData(object) {

            if (object.current_page > object.last_page && object.total > 0) {
                this.pagination.state.current_page = object.last_page;
                this.loadData();
                return;
            }

            this.collection = object.data;
            this.pagination.state.current_page = object.current_page;
            this.pagination.state.last_page = object.last_page;
            this.pagination.state.total = object.total;
            this.pagination.state.per_page = object.per_page;
            this.pagination.state.to = object.to;
            this.pagination.state.from = object.from;
        },
        deleteItem: function deleteItem(url) {
            var _this2 = this;

            this.$modal.show('dialog', {
                title: 'Warning!',
                text: 'Do you really want to delete this item?',
                buttons: [{ title: 'No, cancel.' }, {
                    title: '<span class="btn-dialog btn-danger">Yes, delete.<span>',
                    handler: function handler() {
                        _this2.$modal.hide('dialog');
                        axios.delete(url).then(function (response) {
                            _this2.loadData();
                            _this2.$notify({ type: 'success', title: 'Success!', text: response.data.message ? response.data.message : 'Item successfully deleted.' });
                        }, function (error) {
                            _this2.$notify({ type: 'error', title: 'Error!', text: error.response.data.message ? error.response.data.message : 'An error has occured.' });
                        });
                    }
                }]
            });
        },
        toggleSwitch: function toggleSwitch(url, col, row) {
            var _this3 = this;

            axios.post(url, row).then(function (response) {
                _this3.$notify({ type: 'success', title: 'Success!', text: response.data.message ? response.data.message : 'Item successfully changed.' });
            }, function (error) {
                row[col] = !row[col];
                _this3.$notify({ type: 'error', title: 'Error!', text: error.response.data.message ? error.response.data.message : 'An error has occured.' });
            });
        }
    }

};